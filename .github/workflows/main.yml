name: CMake

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Dependency: cmocka

      - name: cmocka - Configure cache - src
        if: ${{ !env.ACT }}
        id: cache-cmocka-src
        uses: actions/cache@v2
        with:
          path: output/cmocka
          key: ${{ runner.os }}-cmocka-src

      - name: cmocka - Configure cache - bin
        if: ${{ !env.ACT }}
        id: cache-cmocka-bin
        uses: actions/cache@v2
        with:
          path: output/cmocka-bin
          key: ${{ runner.os }}-cmocka-bin

      - name: cmocka - Clone
        if: steps.cache-cmocka-src.outputs.cache-hit != 'true'
        uses: sudosubin/git-clone-action@v1.0.1
        with:
          repository: projects/cmocka
          platform: git.cryptomilk.org
          ref: cmocka-1.1.5
          path: output/cmocka

      - name: cmocka - Configure CMake
        if: steps.cache-cmocka-bin.outputs.cache-hit != 'true'
        run: cmake -B ${{github.workspace}}/output/cmocka/build -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/output/cmocka-bin -DWITH_STATIC_LIB=ON output/cmocka

      - name: cmocka - Build
        if: steps.cache-cmocka-bin.outputs.cache-hit != 'true'
        run: cmake --build ${{github.workspace}}/output/cmocka/build

      - name: cmocka - Install
        if: steps.cache-cmocka-bin.outputs.cache-hit != 'true'
        run: cmake --install ${{github.workspace}}/output/cmocka/build

      # Dependency: ABSL

      - name: absl - Configure cache - src
        if: ${{ !env.ACT }}
        id: cache-absl-src
        uses: actions/cache@v2
        with:
          path: output/absl
          key: ${{ runner.os }}-absl-src

      - name: absl - Configure cache - bin
        if: ${{ !env.ACT }}
        id: cache-absl-bin
        uses: actions/cache@v2
        with:
          path: output/absl-bin
          key: ${{ runner.os }}-absl-bin

      - name: absl - Clone
        if: steps.cache-absl-src.outputs.cache-hit != 'true'
        uses: sudosubin/git-clone-action@v1.0.1
        with:
          repository: abseil/abseil-cpp
          path: output/absl
          ref: lts_2021_11_02

      - name: absl - Configure CMake
        if: steps.cache-absl-bin.outputs.cache-hit != 'true'
        run: cmake -B ${{github.workspace}}/output/absl/build -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/output/absl-bin -DCMAKE_CXX_STANDARD=17 -DCMAKE_POSITION_INDEPENDENT_CODE=ON output/absl

      - name: absl - Build
        if: steps.cache-absl-bin.outputs.cache-hit != 'true'
        run: cmake --build ${{github.workspace}}/output/absl/build

      - name: absl - Install
        if: steps.cache-absl-bin.outputs.cache-hit != 'true'
        run: cmake --install ${{github.workspace}}/output/absl/build

      # Dependency: Google Test

      - name: gtest - Configure cache - src
        if: ${{ !env.ACT }}
        id: cache-gtest-src
        uses: actions/cache@v2
        with:
          path: output/gtest
          key: ${{ runner.os }}-gtest-src

      - name: gtest - Clone
        if: steps.cache-gtest-src.outputs.cache-hit != 'true'
        uses: sudosubin/git-clone-action@v1.0.1
        with:
          repository: google/googletest
          path: output/gtest
          ref: release-1.8.0

      # Dependency: S2

      - name: S2 - Configure cache - src
        if: ${{ !env.ACT }}
        id: cache-s2-src
        uses: actions/cache@v2
        with:
          path: output/s2
          key: ${{ runner.os }}-s2-src

      - name: S2 - Configure cache - bin
        if: ${{ !env.ACT }}
        id: cache-s2-bin
        uses: actions/cache@v2
        with:
          path: output/s2-bin
          key: ${{ runner.os }}-s2-bin

      - name: S2 - Clone
        if: steps.cache-s2-src.outputs.cache-hit != 'true'
        uses: sudosubin/git-clone-action@v1.0.1
        with:
          repository: google/s2geometry
          path: output/s2

      - name: S2 - Configure CMake
        if: steps.cache-s2-bin.outputs.cache-hit != 'true'
        run: cmake -B ${{github.workspace}}/output/s2/build -DCMAKE_PREFIX_PATH="${{github.workspace}}/output/absl-bin" -DBUILD_EXAMPLES=OFF -DGTEST_ROOT="${{github.workspace}}/output/gtest/googletest" -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/output/s2-bin output/s2

      - name: S2 - Build
        if: steps.cache-s2-bin.outputs.cache-hit != 'true'
        run: cmake --build ${{github.workspace}}/output/s2/build

      - name: S2 - Install
        if: steps.cache-s2-bin.outputs.cache-hit != 'true'
        run: cmake --install ${{github.workspace}}/output/s2/build

      # Main build

      - name: redis-s2geo - Configure CMake
        run: cmake -B ${{github.workspace}}/output/redis-s2geo/build -DABSL_PATH="${{github.workspace}}/output/absl-bin" -DCMOCKA_PATH="${{github.workspace}}/output/cmocka-bin" -DS2_PATH="${{github.workspace}}/output/s2-bin" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} .

      - name: redis-s2geo - Build
        run: cmake --build ${{github.workspace}}/output/redis-s2geo/build

      - name: redis-s2geo - Test
        run: ${{github.workspace}}/output/redis-s2geo/build/redis-s2geo-test

      - name: redis-s2geo - Archive
        run: ${{github.workspace}}/archive.sh ${{github.workspace}}/output/redis-s2geo/ redis-s2geo-${{ runner.os }}

      - name: redis-s2geo - Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: redis-s2geo-${{ runner.os }}
          path: |
            ${{github.workspace}}/output/redis-s2geo/build/redis-s2geo-${{ runner.os }}.tar.gz
